#+TITLE: nispy, Smallish elisp scripts to do nifty things in Emacs

* Converting GoodReader PDF Annotations to org-mode Notes from Emacs using Elisp

Working on an #Emacs #Lisp script that converts annotations collected from PDF books with GoodReader
into org-mode notes.

** Configuring Emacs for Elisp
:LOGBOOK:
CLOCK: [2020-05-24 Sun 14:33]--[2020-05-24 Sun 14:49] =>  0:16
CLOCK: [2020-05-24 Sun 14:15]--[2020-05-24 Sun 14:29] =>  0:14
:END:

- [X] remove doc string requirement
- [X] remove file header requirement

*** Resources  

- [[https://github.com/gonewest818/elisp-lint][elisp-lint]] 
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][.dir-locals.el docs]]   
- [[https://emacs.stackexchange.com/a/10854][add-dir-local-variable interactively (stackoverflow)]] used this to have the below added to our ~.dir-locals.el~

#+BEGIN_SRC 
((emacs-lisp-mode
  (flycheck-disabled-checkers emacs-lisp-checkdoc)))
#+END_SRC

** Get String Lines of Annotations

:LOGBOOK:
CLOCK: [2020-05-23 Sat 18:46]--[2020-05-23 Sat 19:21] =>  0:35
:END:

- [X] split into lines
- [X] remove empty lines
- [X] get string from clipboard
- [X] add result string to clipboard

*** Resources

**** Filter Empty Lines

- [[https://stackoverflow.com/a/1019821][detect empty string]], [[https://stackoverflow.com/a/52878402][string-emtpy-p]] 

#+BEGIN_SRC lisp
(string= "" user-str)
(string-empty-p " ") ;; => nil
(string-blank-p " ") ;; => 0
#+END_SRC

- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html][sequences]] 

#+BEGIN_SRC lisp
(seq-filter (lambda (elt) (> elt 0)) [1 -1 3 -3 5])
#+END_SRC

**** Clipboard Interaction

Working Solution.

#+BEGIN_SRC lisp
(gui-get-selection 'CLIPBOARD)
(gui-set-selection 'CLIPBOARD "hello clippy")
#+END_SRC

***** String from Clipboard

- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Kill-Ring.html][current-kill-doc]] 
- [[https://emacs.stackexchange.com/a/51874][current-kill-stackoverflow]] 

#+BEGIN_SRC lisp
(setq zwischenablage (current-kill 0 t))
(gui-get-selection 'CLIPBOARD)
#+END_SRC

***** String to Clipboard

- [[https://stackoverflow.com/a/51515731][kill-new]] 
- [[https://stackoverflow.com/a/51520638][gui-set-selection]] 
  
#+BEGIN_SRC lisp
(kill-new "this is copied to clipboard")

;; without affecting the kill-ring
;; without depending on the value of select-enable-clipboard 
(gui-set-selection 'CLIPBOARD "copied to clipboard from Emacs")
#+END_SRC


** Extract Header Information
:LOGBOOK:
CLOCK: [2020-05-24 Sun 14:59]--[2020-05-24 Sun 15:41] =>  0:42
CLOCK: [2020-05-23 Sat 19:23]--[2020-05-23 Sat 20:05] =>  0:42
:END:

- [X] set flag awaiting header when we see ~Highlight:~
- [X] add header to list
- [X] unset flag awaiting header 
- [X] push header onto list
- [X] reverse list before returning it

*** Resources

**** List Traversal and Manipulation

- [[https://www.gnu.org/software/emacs/manual/html_node/eintr/dolist.html][dolist]] showing example for [[https://www.gnu.org/software/emacs/manual/html_node/eintr/while.html][while]] that we ended up using

#+BEGIN_SRC lisp
(defun reverse-list-with-while (list)
  (let (value)
    (while list
      (setq value (cons (car list) value))
      (setq list (cdr list)))
    value))
#+END_SRC

- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Variables.html][lists pop/push]] 
- [[http://www.gigamonkeys.com/book/macros-standard-control-constructs.html#dolist-and-dotimes][dolist+dotimes common lisp book]] 
- [[http://www.gigamonkeys.com/book/macros-standard-control-constructs.html#do][more generic do]] 

**** Regex 

- [[https://stackoverflow.com/a/3278574][string-match stackoverflow]] 

#+BEGIN_SRC lisp
(string-match "^Highlight\:" "Highlight:") ;; => 0
(string-match "^Highlight\:" "Hghlight:") ;; => nil
#+END_SRC

** Extract Item Information
:LOGBOOK:
CLOCK: [2020-05-24 Sun 15:41]--[2020-05-24 Sun 16:32] =>  0:51
:END:

- [X] proceed similarly as for header
- [X] identify code segments, i.e. if it contains ~()~ 

** Render List to Org Mode
:LOGBOOK:
CLOCK: [2020-05-24 Sun 17:14]--[2020-05-24 Sun 17:44] =>  0:30
:END:

- [X] wrap code segments to get them highlighed
- [X] prefix page number for items 
- [X] translate page link using the actual page that the first page is on
- [X] render simple headers and list items


** Extra Features

- [X] collect page numbers and put them in front of every item
- [X] pass page offset to interactive function
- [X] use clipboard as input and copy rendered string to clipboard
- [X] link to a local PDF document including page
  
** Open Links to PDF

Write elisp function that when called with file name and page number openes the PDF file to the page. Then call it from the ~elisp:~ link.

- [ ] figure out how to open pdf file to page with apple script
- [ ] figure out how to call apple script from elisp
- [ ] change page links to link to this ~elisp:~ invocation with correct page number
- [ ] add option to pass in path to PDF file when running ~nispy-good-reader->org-mode~

*** Resources 

- [[https://discussions.apple.com/thread/3215851][using AppleScript to open file in Preview at certain page]] 
- [[https://orgmode.org/manual/External-Links.html][external links in org-mode]] (we'd use ~elisp:~ which executes an elisp command)
  
** HOLD Make [[*Clipboard Interaction][Clipboard Interaction]] Work in All Cases

When text is copied from inside Emacs results contain additional info about copied text,.

May not need since most likely we'll copy this from outside Emacs.

- [ ] pull out text from result in those cases
  

 


